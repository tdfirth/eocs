// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //Handle zx
    Mux16(a=x, b[0..15]=false, sel=zx, out=xPostZX);

    //Handle nx
    Not16(in=xPostZX, out=notXPostZX);
    Mux16(a=xPostZX, b=notXPostZX, sel=nx, out=xPostZXAndNX);

    //Handle zy
    Mux16(a=y, b[0..15]=false, sel=zy, out=yPostZY);

    //Handle ny
    Not16(in=yPostZY, out=notYPostZY);
    Mux16(a=yPostZY, b=notYPostZY, sel=ny, out=yPostZYAndNY);

    //Add16 of results
    Add16(a=xPostZXAndNX, b=yPostZYAndNY, out=fEquals1);

    //Bitwise And16 of results
    And16(a=xPostZXAndNX, b=yPostZYAndNY, out=fEquals0);

    //Choose correct one based on f.
    Mux16(a=fEquals0, b=fEquals1, sel=f, out=resultBeforeNO);

    //Handle no
    Not16(in=resultBeforeNO, out=resultAfterNO);
    Mux16(a=resultBeforeNO, b=resultAfterNO, sel=no, out=result);

    //Hack to select the output so that we can still use it for the next bits.
    //The hardware simulator throws an error if you try to use the out further done.
    //This seems kinda ineffcient.
    Mux16(a=result, b=false, sel=false, out=out);

    //Compute zr.  If we Or every bit with the one next to it, this will only return 0 if all
    //the bits are 0.
    Or16Way(in=result, out=zrResult);

    //Now we have to negate zrResult as it is 0 if out=0 which is the opposite of what we want.
    Not(in=zrResult, out=zr);

    //Compute ng.
    //Negative numbers start with 1 in twos compliment.
    //So we just have to compare the first bit with 1 and return 1 if so.
    Neg16Test(in=result, out=ng);
}